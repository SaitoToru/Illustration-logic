name: Android, iOS, Build and Deploy

on:
  push: { branches: [main] }

env:
  # 2. の手順で Secrets に登録した Unity ライセンスの情報を指定する
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

  # もし Professional license を使いたい場合は、
  # メールアドレス、パスワード、シリアルナンバーを入力する必要がある
  # ref: https://game.ci/docs/github/test-runner#professional-license
  # UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  # UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  # UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  tests:
    name: Test Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library
      - name: Run EditMode and PlayMode Tests
        uses: game-ci/unity-test-runner@main
      - name: Publish Test Results
        if: ${{ always() }} # Avoid skipping on failed tests
        uses: davidmfinol/unity-test-publisher@main
        with:
          githubToken: ${{ secrets.AUTH_GITHUB_TOKEN }}

  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }} by Unity
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # - Android
          - iOS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: |
            Library
            build/${{ matrix.targetPlatform }}
          key: Library-${{ matrix.targetPlatform }}-
          restore-keys: Library-
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Build Unity Project
        uses: game-ci/unity-builder@main
        with:
          customParameters: -buildNumber ${{ github.run_number }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Cgs.Editor.BuildCgs.BuildOptions
          androidAppBundle: false
      - name: Upload Build
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cgs-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
  # deploy:
  #   needs: [buildWithLinux]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - Android
  #   runs-on: ubuntu-latest
  #   name: deploy android app
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: set up JDK 1.8
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.8
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v2
  #       id: download
  #       with:
  #         name: cgs-${{ matrix.targetPlatform }}
  #         path: build/${{ matrix.targetPlatform }}
  #     - name: Upload artifact to Firebase App Distribution
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1
  #       with:
  #         appId: ${{secrets.FIREBASE_ANDROID_APP_ID}}
  #         token: ${{secrets.FIREBASE_TOKEN}}
  #         groups: tester
  #         file: ${{steps.download.outputs.download-path}}/Android.apk
  #         debug: true
  #     - name: Cleanup
  #       if: always()
  #       uses: geekyeggo/delete-artifact@v1
  #       with:
  #         name: cgs-${{ matrix.targetPlatform }}

  buildIOS:
    name: Build Archive for iOS
    runs-on: macos-latest
    timeout-minutes: 60
    needs: buildWithLinux
    env:
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
      IOS_APP_ID: ${{ secrets.IOS_APP_ID }} # bundle idを指定します
      IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
      MATCH_REPOSITORY_ACCOUNT: ${{ secrets.MATCH_REPOSITORY_ACCOUNT }}
      USYM_UPLOAD_AUTH_TOKEN: 'fake' # ビルドが途中でこけるのでfake用に環境変数を追加。
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Cache restore for debug
        uses: actions/cache@v2
        with:
          path: |
            Library
            build/iOS
          key: Library-iOS-
          restore-keys: Library-
      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-iOS
          path: build/iOS
      - name: Cache restore cocoapods # firebase使ってるとcocoapodsを使うのですが、cocoapodsのキャッシュとらないと毎回時間かかるのでキャッシュしておきます。
        uses: actions/cache@v2
        if: ${{ always() }}
        with:
          path: |
            build/iOS/iOS/Pods
            ~/.cocoapods/repos
          key: Pods-${{ hashFiles('**/Podfile') }}
          restore-keys: Pods-
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Prepare for fastlane # GateKeeper対策
        run: |
          sudo spctl --master-disable
      - name: Archive iOS
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'ios build'
      - name: run if fail_step failed # ビルドがコケた原因がわかるようにcatしておきます
        if: failure()
        run: cat /Users/runner/Library/Logs/gym/*Unity-iPhone.log
      - name: Upload Build
        uses: actions/upload-artifact@v2
        # if: github.event.ref != 'refs/heads/develop'
        if: ${{ always() }}
        with:
          name: ipa
          path: |
            ${{ github.workspace }}/*.ipa
            ${{ github.workspace }}/*.dSYM.zip
  deploy:
    needs: [buildIOS]
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS
    runs-on: ubuntu-latest
    name: deploy ios app
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: ipa
          path: build/${{ matrix.targetPlatform }}
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_IOS_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: tester
          file: ${{steps.download.outputs.download-path}}/firebase.ipa
          debug: true
      - name: Cleanup
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: cgs-${{ matrix.targetPlatform }}